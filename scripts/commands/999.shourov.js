const fs = require("fs");
const path = require("path");

module.exports = {
  config: {
    name: "ü•∞",
    version: "1.0.1",
    prefix: false,
    permission: 0,
    credits: "nayan",
    description: "Fun",
    category: "no prefix",
    usages: "üòí",
    cooldowns: 5,
  },

  handleEvent: async function({ api, event }) {
    const { threadID, messageID, body } = event;
    if (!body) return;

    if (
      body.startsWith("üòò") ||
      body.startsWith("ü•∞") ||
      body.startsWith("üòç") ||
      body.startsWith("ü§©")
    ) {
      try {
        // ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶™‡¶æ‡¶•
        const audioPath = path.resolve(__dirname, "../cache/Shourov.mp3");

        // ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡¶ó ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá ‡¶ï‡ßã‡¶•‡¶æ‡ßü ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶≤‡ßã ‡¶´‡¶æ‡¶á‡¶≤
        console.log("Audio file path:", audioPath);
        console.log("File exists:", fs.existsSync(audioPath));

        // ‡¶Ø‡¶¶‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶¨‡ßá
        if (!fs.existsSync(audioPath)) {
          return api.sendMessage("‚ùå ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!", threadID, messageID);
        }

        // ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
        const msg = {
          body: "‡¶è‡ßç‡¶Å‡¶§‡ßç‡¶Å ‡¶≠‡¶æ‡ßç‡¶Å‡¶≤‡ßã‡ßç‡¶Å‡¶¨‡¶æ‡ßç‡¶Å‡¶∏‡¶æ‡ßç‡¶Å ‡¶ï‡ßç‡¶Å‡¶á‡ßç‡¶Å ‡¶™‡¶æ‡ßç‡¶Å‡¶ì‡ßç‡¶Å ‡¶Ü‡ßç‡¶Å‡¶Æ‡¶æ‡ßç‡¶Å‡¶∞‡ßç‡¶Å ‡¶¨‡ßç‡¶Å‡¶∏‡ßç‡¶Å ‡¶∏‡ßå‡ßç‡¶Å‡¶∞‡ßç‡¶Å‡¶≠‡ßç‡¶Å ‡¶ï‡ßá‡ßç‡¶Å ‡¶è‡ßç‡¶Å‡¶ï‡ßç‡¶Å‡¶ü‡ßÅ‡¶Å ‡¶¶‡ßá‡ßç‡¶Å‡¶ì‡ßç‡¶Å üå∫",
          attachment: fs.createReadStream(audioPath),
        };

        // ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
        api.sendMessage(msg, threadID, messageID);

        // ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∞‡¶ø‡ßü‡ßá‡¶ï‡¶∂‡¶® ‡¶¶‡ßá‡ßü‡¶æ
        api.setMessageReaction("üòÅ", messageID, () => {}, true);

      } catch (error) {
        console.error("‚ö†Ô∏è ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", error.message);
      }
    }
  },

  start() {
    // Optional, ‡¶¨‡¶ü ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶π‡¶≤‡ßá ‡¶Ø‡¶æ ‡¶ï‡¶∞‡¶£‡ßÄ‡ßü ‡¶§‡¶æ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡¶ø‡¶¨‡ßá
  },
};